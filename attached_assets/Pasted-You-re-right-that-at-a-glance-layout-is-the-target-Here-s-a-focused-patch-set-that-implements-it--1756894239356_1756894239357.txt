You’re right—that “at-a-glance” layout is the target. Here’s a focused patch set that implements it exactly:

* **Identity bar** (name • age • NHI • room)
* **Risk ribbon** (EWS w/ trend, ATS, allergies, isolation, falls)
* **Actions** (Assign room, +Obs, Order set; role-aware)
* **Complaint + Pathway clocks** (ACS/Sepsis)
* **Vitals** (capsules) + **Next obs** chip
* **Vitals timeline**
* **Right column order:** **Results → Journey → Notes → Tasks**
* Notes quick-phrases; Tasks block has “View in Task Sheet”

I’ve kept everything isolated and safe (no setState-in-render, no loops). Drop these in.

---

# 1) UI primitives (add if you haven’t already)

`components/ui/Chip.tsx`

```tsx
import React from "react";
import clsx from "clsx";
type Props = { children: React.ReactNode; tone?: "default"|"info"|"warning"|"critical"; className?: string; onClick?: () => void; title?: string; };
export default function Chip({ children, tone="default", className, onClick, title }: Props) {
  const tones = {
    default: "bg-slate-100 text-slate-700",
    info: "bg-blue-50 text-blue-700",
    warning: "bg-amber-50 text-amber-700",
    critical: "bg-red-100 text-red-700",
  } as const;
  return (
    <span title={title} onClick={onClick}
      className={clsx("inline-flex items-center gap-1 px-2 py-0.5 rounded text-xs select-none",
        tones[tone], onClick && "cursor-pointer hover:opacity-80", className)}>
      {children}
    </span>
  );
}
```

`components/ui/Segmented.tsx`

```tsx
import React from "react";
import clsx from "clsx";
export default function Segmented({ options, value, onChange, className }:{
  options:string[]; value:string; onChange:(v:string)=>void; className?:string;
}) {
  return (
    <div className={clsx("inline-flex rounded-lg border bg-white p-0.5", className)}>
      {options.map(opt=>(
        <button key={opt} onClick={()=>onChange(opt)}
          className={clsx("px-3 py-1.5 rounded-md text-sm",
            value===opt? "bg-slate-900 text-white":"hover:bg-slate-100")}>{opt}</button>
      ))}
    </div>
  );
}
```

---

# 2) Helpers you’ll reference

`components/patient/ResultsCapsule.tsx`

```tsx
import React, { useMemo } from "react";
import Chip from "@/components/ui/Chip";
import { useJourneyStore } from "@/stores/journeyStore";

export default function ResultsCapsule({ patientId }:{patientId:string}) {
  const events = useJourneyStore(s=>s.events);
  const latest = useMemo(()=>{
    const evs = events.filter(e=>e.patientId===patientId && e.kind==="result");
    const pick = (q:string)=> [...evs].reverse().find(e => (e.label||"").toLowerCase().includes(q));
    return { ecg:pick("ecg"), trop:pick("trop"), lact:pick("lact"), ct:pick("ct "), cta:pick("cta") };
  },[events,patientId]);
  const when = (e?:any)=> e ? new Date(e.t).toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"}) : "—";
  return (
    <section className="rounded-lg border p-3">
      <div className="text-sm font-semibold mb-2">Results</div>
      <div className="flex flex-wrap gap-2 text-xs">
        <Chip title="ECG">{`ECG: ${when(latest.ecg)}`}</Chip>
        <Chip title="Troponin">{`Troponin: ${when(latest.trop)}`}</Chip>
        <Chip title="Lactate">{`Lactate: ${when(latest.lact)}`}</Chip>
        <Chip title="CT">{`CT: ${when(latest.ct)}`}</Chip>
        <Chip title="CTA">{`CTA: ${when(latest.cta)}`}</Chip>
      </div>
    </section>
  );
}
```

`components/patient/PathwayClocks.tsx`

```tsx
import React, { useMemo } from "react";
import Chip from "@/components/ui/Chip";
import { useJourneyStore } from "@/stores/journeyStore";

export default function PathwayClocks({ patientId, complaint }:{patientId:string; complaint?:string}) {
  const lower = (complaint||"").toLowerCase();
  const isACS = /chest|sob|shortness of breath|acs|ami/.test(lower);
  const isSepsis = /sepsis|fever|rigor|infection/.test(lower);
  const evs = useJourneyStore(s=>s.events);
  const status = useMemo(()=>{
    const mine = evs.filter(e=>e.patientId===patientId);
    const has = (q:string)=> mine.some(e => (e.label||"").toLowerCase().includes(q));
    return { ecg:has("ecg"), trop:has("trop"), asa:has("aspirin")||has("asa"),
             abx:has("antibiot"), lact:has("lactate") };
  },[evs,patientId]);

  if(!isACS && !isSepsis) return null;
  return (
    <div className="mt-2 flex flex-wrap gap-2 text-xs">
      {isACS && <>
        <Chip tone={status.ecg?"default":"warning"}>ECG {status.ecg?"done":"Due <10m"}</Chip>
        <Chip tone={status.trop?"default":"warning"}>Troponin {status.trop?"taken":"Due now"}</Chip>
        <Chip tone={status.asa?"default":"warning"}>Aspirin {status.asa?"given":"Due"}</Chip>
      </>}
      {isSepsis && <>
        <Chip tone={status.abx?"default":"warning"}>Antibiotics {status.abx?"given":"Due"}</Chip>
        <Chip tone={status.lact?"default":"warning"}>Lactate {status.lact?"taken":"Due"}</Chip>
      </>}
    </div>
  );
}
```

`lib/nextObs.ts`

```ts
import { useJourneyStore } from "@/stores/journeyStore";
export function nextObsDueISO(patientId: string): string | null {
  const all = useJourneyStore.getState().events.filter(e=>e.patientId===patientId);
  const vitals = [...all].reverse().find(e=>e.kind==="vitals"); if(!vitals) return null;
  const ewsEv = [...all].reverse().find(e=>e.kind==="ews_change");
  let ews = 0; if(ewsEv && typeof ewsEv.detail==="string"){ const m = ewsEv.detail.match(/(\d+)/); if(m) ews = +m[1]; }
  const mins = ews>=5?15: ews>=3?30:60;
  const d = new Date(vitals.t); d.setMinutes(d.getMinutes()+mins);
  return d.toISOString();
}
```

---

# 3) Patient Card layout (replace your main content skeleton)

In `components/patient/PatientCardExpandable.tsx`:

```tsx
// ADD near top
import Chip from "@/components/ui/Chip";
import Segmented from "@/components/ui/Segmented";
import ResultsCapsule from "@/components/patient/ResultsCapsule";
import PathwayClocks from "@/components/patient/PathwayClocks";
import { nextObsDueISO } from "@/lib/nextObs";
import { useRoleStore } from "@/stores/roleStore";

// …inside component
const roleView = useRoleStore(s=>s.role);
const isHCA = roleView === "HCA";

// Ensure overlay sits below app header and above lanes
return (
  <div className="fixed inset-0 z-[80] flex justify-center items-start pt-[6%]">
    <div className="w-[80%] max-w-6xl bg-white rounded-2xl shadow-2xl overflow-hidden">

      {/* ===== Identity + Risk + Actions ===== */}
      <header className="sticky top-0 bg-white z-[1] p-4 border-b">
        <div className="flex items-start justify-between gap-4">
          <div>
            <div className="text-lg font-semibold">{patient?.name ?? "—"}</div>
            <div className="mt-1 flex flex-wrap gap-2 text-xs">
              <Chip>Age {patient?.age ?? "—"}</Chip>
              <Chip>NHI {patient?.nhiMasked ?? "•••"}</Chip>
              <Chip>Room {patient?.room ?? "—"}</Chip>
            </div>
            <div className="mt-2 flex flex-wrap gap-2">
              <Chip tone={(patient?.ews ?? 0) >= 5 ? "critical" : (patient?.ews ?? 0) >= 3 ? "warning" : "info"}>
                EWS {patient?.ews ?? "—"} {patient?.ewsTrend ?? ""}
              </Chip>
              <Chip>ATS {patient?.ats ?? "—"}</Chip>
              {patient?.allergy && <Chip tone="warning">Allergy: {patient.allergy}</Chip>}
              {patient?.isolation && <Chip tone="warning">Isolation</Chip>}
              {patient?.falls && <Chip tone="warning">Falls risk</Chip>}
            </div>
          </div>

          {!isHCA && (
            <div className="flex items-center gap-2">
              <button className="px-3 py-1.5 rounded border">Assign room</button>
              {(roleView==="RN" || roleView==="MD") && (
                <button onClick={openObsDrawer} className="px-3 py-1.5 rounded bg-blue-600 text-white">+ Obs</button>
              )}
              {roleView==="MD" && (
                <button className="px-3 py-1.5 rounded border">Order set</button>
              )}
            </div>
          )}
        </div>
      </header>

      {/* ===== Complaint + Pathway clocks ===== */}
      <section className="px-4 pt-3">
        <div className="text-sm font-medium text-slate-700">
          {patient?.complaint ?? "—"}
        </div>
        <PathwayClocks patientId={patient.id} complaint={patient?.complaint} />
      </section>

      {/* ===== 2-column layout ===== */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-3 p-4">
        {/* LEFT: Vitals + timeline */}
        <section className="rounded-lg border p-3">
          <div className="flex items-center justify-between">
            <h3 className="text-sm font-semibold">Vitals</h3>
            {/* Next obs chip */}
            {(() => {
              const iso = nextObsDueISO(patient.id);
              if (!iso) return null;
              const due = new Date(iso);
              const overdue = Date.now() > due.getTime();
              return (
                <Chip tone={overdue ? "critical" : "default"}>
                  Next obs: {due.toLocaleTimeString([], { hour:"2-digit", minute:"2-digit" })}
                  {overdue && <span className="ml-1">Overdue</span>}
                </Chip>
              );
            })()}
          </div>

          {/* your existing vitals capsule row remains here */}

          <div className="mt-3">
            <VitalsTimelineInline patientId={patient.id} />
          </div>
        </section>

        {/* RIGHT: Results → Journey → Notes → Tasks */}
        <section className="space-y-3">
          {/* 1) RESULTS (top) */}
          <ResultsCapsule patientId={patient.id} />

          {/* 2) JOURNEY (with simplified filters) */}
          <div className="rounded-lg border p-3">
            <div className="flex items-center justify-between mb-2">
              <h3 className="text-sm font-semibold">Patient journey</h3>
              <JourneyFilters />
            </div>
            <PatientJourneyInline patientId={patient.id} />
          </div>

          {/* 3) NOTES (with quick-phrases) */}
          <div className="rounded-lg border p-3">
            <div className="flex items-center justify-between mb-2">
              <h3 className="text-sm font-semibold">Notes</h3>
              {!isHCA && (
                <button onClick={()=>openNotesDrawer()} className="px-3 py-1.5 rounded bg-blue-600 text-white">Write note</button>
              )}
            </div>
            {/* preview last 1–2 notes if you have them; otherwise show empty */}
            {Array.isArray(notes) && notes.length>0 ? (
              <ul className="text-sm text-slate-700 space-y-1">
                {notes.slice(-2).map(n => <li key={n.id} className="truncate">{n.text}</li>)}
              </ul>
            ) : (
              <div className="text-sm text-slate-500">No notes yet.</div>
            )}
            {!isHCA && (
              <div className="mt-3 flex flex-wrap gap-2">
                {["Patient settled","Analgesia effective","Family updated"].map(q=>(
                  <Chip key={q} onClick={()=>openNotesDrawer(q)}>{q}</Chip>
                ))}
              </div>
            )}
          </div>

          {/* 4) TASKS */}
          <div className="rounded-lg border p-3">
            <div className="flex items-center justify-between mb-2">
              <h3 className="text-sm font-semibold">Tasks</h3>
              <button onClick={()=>openTaskSheetForPatient?.(patient.id)} className="px-3 py-1.5 rounded border">
                View in Task Sheet
              </button>
            </div>
            {/* You can render a per-patient TaskList(pending/overdue) here once loops are fixed */}
          </div>
        </section>
      </div>
    </div>
  </div>
);
```

**Simplified Journey filter control** (drop inside the same file or a tiny component file):

```tsx
function JourneyFilters(){
  const [mode, setMode] = React.useState("Clinical");
  const [win, setWin]   = React.useState("8h");
  return (
    <div className="flex items-center gap-2">
      <Segmented options={["Clinical","Moves","All"]} value={mode} onChange={setMode}/>
      <Segmented options={["4h","8h","24h","72h"]} value={win} onChange={setWin}/>
    </div>
  );
}
```

> If your `PatientJourneyInline` accepts filter props, pass `{mode, window: win}` to it; otherwise keep this purely visual until you wire filters through your store.

---

## Notes & safety

* No state is set during render; no hydration loops introduced.
* The **Vitals header no longer has “Timeline” or “+Obs”** buttons; **+Obs** remains only in the Actions bar (top right), as agreed.
* Right column stack is **Results → Journey → Notes → Tasks**.
* Pathway clocks and Next-Obs are purely read-only helpers.

If anything here doesn’t match a type in your repo (e.g., `patient.nhiMasked`), just map to your fields—structure stays the same.
