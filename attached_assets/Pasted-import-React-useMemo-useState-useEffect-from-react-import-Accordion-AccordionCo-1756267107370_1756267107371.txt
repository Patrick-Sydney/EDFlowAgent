import React, { useMemo, useState, useEffect } from "react";
import { 
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Separator } from "@/components/ui/separator";
import { 
  Activity,
  Bell,
  ClipboardCheck,
  FileText,
  HeartPulse,
  MoreHorizontal,
  Pill,
  Stethoscope,
  Thermometer,
  TimerReset,
  XCircle,
  ChevronDown,
  UserCircle2,
  AlertTriangle,
  ListChecks,
  TestTubes,
  BrainCircuit,
} from "lucide-react";

/**
 * Phase‑2 Scaffold: Clickable + Expandable Patient Card
 * - Role aware (Charge RN vs MD)
 * - Shows Triage, Assessment, Vitals timeline, Notes, Diagnostics, Actions, Insights
 * - Light alerts + Task Board per patient
 * - EWS badge auto color from score
 */

// ---------- Types ----------
export type Role = "reception" | "charge" | "rn" | "md";

export type ATS = 1 | 2 | 3 | 4 | 5;

export interface Observation {
  id: string;
  type: "HR" | "BP" | "Temp" | "RR" | "SpO2" | "GCS" | "Pain";
  value: string; // store canonical string; parse as needed
  unit?: string;
  takenAt: string; // ISO time
  recordedBy: string;
}

export interface EWS {
  score: number;
  riskLevel: "low" | "medium" | "high";
  calculatedAt: string;
}

export interface TaskItem {
  id: string;
  description: string;
  dueAt?: string;
  status: "pending" | "done" | "overdue";
  source: "auto" | "user" | "orderSet";
}

export interface DiagnosticOrder {
  id: string;
  kind: "Lab" | "Imaging" | "ECG";
  name: string;
  status: "ordered" | "in-progress" | "resulted" | "canceled";
  orderedAt: string;
  resultedAt?: string;
  summary?: string; // brief result capsule
}

export interface NoteEntry {
  id: string;
  authorRole: Role;
  author: string;
  createdAt: string;
  body: string;
}

export interface PatientSummary {
  id: string;
  mrn?: string;
  nhis?: string;
  name: string;
  age: number;
  sex: "M" | "F" | "X";
  arrival: string; // ISO
  ats: ATS;
  ews: EWS;
  chiefComplaint: string;
  location: string; // e.g., Waiting, Triage, Room 3
  covid?: "neg" | "pos" | "unk";
}

export interface PatientFull extends PatientSummary {
  observations: Observation[];
  tasks: TaskItem[];
  diagnostics: DiagnosticOrder[];
  notes: NoteEntry[];
  assessment?: {
    hx?: string;
    exam?: string;
    impression?: string;
  };
  insights?: string[]; // lightweight AI hints / rules‑based insights
}

// ---------- Helpers ----------
const riskColor = (risk: EWS["riskLevel"]) => {
  switch (risk) {
    case "low":
      return "bg-green-600";
    case "medium":
      return "bg-yellow-500";
    case "high":
      return "bg-red-600";
  }
};

const statusBadge = (s: TaskItem["status"]) => {
  if (s === "pending") return <Badge variant="secondary">Pending</Badge>;
  if (s === "overdue") return <Badge className="bg-red-600">Overdue</Badge>;
  return <Badge className="bg-green-600">Done</Badge>;
};

const fmtTime = (iso?: string) => (iso ? new Date(iso).toLocaleTimeString() : "—");

// Basic EWS color inference if only score is available
const ewsToRisk = (score: number): EWS["riskLevel"] => {
  if (score >= 7) return "high";
  if (score >= 4) return "medium";
  return "low";
};

// ---------- Component ----------
export interface PatientCardExpandableProps {
  role: Role;
  patient: PatientFull;
  onOpenChart?: (patientId: string) => void;
  onMarkTask?: (patientId: string, taskId: string, status: TaskItem["status"]) => void;
  onOrderSet?: (patientId: string, setName: "Sepsis" | "Stroke" | "Chest Pain") => void;
  onDisposition?: (patientId: string, disp: "Admit" | "Discharge" | "Refer") => void;
}

const QuickBadge: React.FC<{ label: string; className?: string; title?: string; icon?: React.ReactNode }>= ({ label, className = "", title, icon }) => (
  <div title={title} className={`inline-flex items-center gap-1 rounded-full px-2 py-1 text-xs font-medium bg-muted ${className}`}>
    {icon}
    <span>{label}</span>
  </div>
);

export default function PatientCardExpandable({ role, patient, onOpenChart, onMarkTask, onOrderSet, onDisposition }: PatientCardExpandableProps) {
  const [expanded, setExpanded] = useState(false);

  const ews = useMemo(() => patient.ews ?? { score: 0, riskLevel: ewsToRisk(0), calculatedAt: patient.arrival }, [patient]);
  const lastObs = useMemo(() => patient.observations.slice().sort((a,b)=>a.takenAt.localeCompare(b.takenAt)).at(-1), [patient.observations]);
  const overdueCount = useMemo(() => patient.tasks.filter(t=>t.status==='overdue').length, [patient.tasks]);

  // Accessibility: expand/collapse with Enter/Space
  const onKeyToggle: React.KeyboardEventHandler<HTMLDivElement> = (e) => {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      setExpanded(prev => !prev);
    }
  };

  return (
    <Card className="w-full border-2 hover:border-primary/50 transition-colors rounded-2xl">
      {/* Header Row (Clickable) */}
      <div
        role="button"
        tabIndex={0}
        onClick={() => setExpanded(!expanded)}
        onKeyDown={onKeyToggle}
        className="flex items-center justify-between gap-3 p-4 cursor-pointer"
        aria-expanded={expanded}
        aria-controls={`patient-${patient.id}-body`}
      >
        <div className="flex items-center gap-4 min-w-0">
          <UserCircle2 className="h-8 w-8" />
          <div className="min-w-0">
            <div className="flex items-center gap-2">
              <CardTitle className="text-lg truncate">{patient.name} <span className="text-muted-foreground">• {patient.age}{" "}{patient.sex}</span></CardTitle>
              <Badge variant="outline">ATS {patient.ats}</Badge>
              <div className={`text-white text-xs px-2 py-1 rounded ${riskColor(ews.riskLevel)}`}>
                EWS {ews.score}
              </div>
              {patient.covid && <QuickBadge icon={<AlertTriangle className="h-3 w-3"/>} label={`COVID ${patient.covid.toUpperCase()}`} className="bg-red-50" />}
            </div>
            <div className="text-sm text-muted-foreground truncate">
              {patient.chiefComplaint} • Arrived {new Date(patient.arrival).toLocaleTimeString()} • {patient.location}
            </div>
            <div className="mt-2 flex flex-wrap items-center gap-2">
              {lastObs && (
                <QuickBadge icon={<Activity className="h-3 w-3"/>} label={`Last obs ${fmtTime(lastObs.takenAt)}`} />
              )}
              <QuickBadge icon={<ListChecks className="h-3 w-3"/>} label={`${patient.tasks.filter(t=>t.status==='pending').length} tasks`} />
              {overdueCount>0 && (
                <QuickBadge icon={<Bell className="h-3 w-3"/>} className="bg-red-100" label={`${overdueCount} overdue`} />
              )}
            </div>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <Button variant="outline" size="sm" onClick={(e)=>{e.stopPropagation(); onOpenChart?.(patient.id);}}>Open Chart</Button>
          <Button variant="ghost" size="icon" aria-label="Expand">
            <ChevronDown className={`h-5 w-5 transition-transform ${expanded? 'rotate-180': ''}`} />
          </Button>
        </div>
      </div>

      {/* Body */}
      {expanded && (
        <div id={`patient-${patient.id}-body`} className="px-4 pb-4">
          <Separator className="mb-3"/>
          <Tabs defaultValue="overview" className="w-full">
            <TabsList className="flex flex-wrap">
              <TabsTrigger value="overview">Overview</TabsTrigger>
              <TabsTrigger value="triage">Triage</TabsTrigger>
              <TabsTrigger value="assessment">Assessment</TabsTrigger>
              <TabsTrigger value="vitals">Vitals</TabsTrigger>
              <TabsTrigger value="notes">Notes</TabsTrigger>
              <TabsTrigger value="diagnostics">Diagnostics</TabsTrigger>
              <TabsTrigger value="tasks">Tasks</TabsTrigger>
              {role === "md" && <TabsTrigger value="orders">Quick Orders</TabsTrigger>}
              {role === "md" && <TabsTrigger value="dispo">Disposition</TabsTrigger>}
            </TabsList>

            {/* OVERVIEW */}
            <TabsContent value="overview">
              <div className="grid grid-cols-1 lg:grid-cols-12 gap-3">
                <Card className="lg:col-span-5">
                  <CardHeader className="pb-2"><CardTitle className="text-base flex items-center gap-2"><HeartPulse className="h-4 w-4"/>EWS & Trends</CardTitle></CardHeader>
                  <CardContent>
                    <div className="flex items-center gap-3">
                      <div className={`text-white rounded-lg px-3 py-2 ${riskColor(ews.riskLevel)}`}>EWS {ews.score}</div>
                      <div className="text-sm text-muted-foreground">as of {fmtTime(ews.calculatedAt)}</div>
                    </div>
                    <div className="mt-3 text-sm text-muted-foreground">(Sparkline placeholder for HR/BP/Temp/RR/SpO₂ over last 6h)</div>
                  </CardContent>
                </Card>
                <Card className="lg:col-span-7">
                  <CardHeader className="pb-2"><CardTitle className="text-base flex items-center gap-2"><ListChecks className="h-4 w-4"/>Active Tasks</CardTitle></CardHeader>
                  <CardContent>
                    <ScrollArea className="h-40 pr-2">
                      <ul className="space-y-2">
                        {patient.tasks.map(t => (
                          <li key={t.id} className="flex items-center justify-between rounded-md border p-2">
                            <div className="flex items-center gap-2 min-w-0">
                              <ClipboardCheck className="h-4 w-4"/>
                              <div className="min-w-0">
                                <div className="text-sm truncate">{t.description}</div>
                                <div className="text-xs text-muted-foreground">Due {fmtTime(t.dueAt)} • {t.source}</div>
                              </div>
                            </div>
                            <div className="flex items-center gap-2">
                              {statusBadge(t.status)}
                              <Button size="sm" variant="outline" onClick={()=>onMarkTask?.(patient.id, t.id, t.status === 'done' ? 'pending' : 'done')}>{t.status==='done' ? 'Undo' : 'Done'}</Button>
                            </div>
                          </li>
                        ))}
                      </ul>
                    </ScrollArea>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            {/* TRIAGE */}
            <TabsContent value="triage">
              <Card>
                <CardHeader className="pb-2"><CardTitle className="text-base flex items-center gap-2"><Stethoscope className="h-4 w-4"/>Triage Summary</CardTitle></CardHeader>
                <CardContent className="space-y-2 text-sm">
                  <div><strong>ATS:</strong> {patient.ats}</div>
                  <div><strong>Chief complaint:</strong> {patient.chiefComplaint}</div>
                  <div><strong>Arrived:</strong> {new Date(patient.arrival).toLocaleString()}</div>
                </CardContent>
              </Card>
            </TabsContent>

            {/* ASSESSMENT */}
            <TabsContent value="assessment">
              <Card>
                <CardHeader className="pb-2"><CardTitle className="text-base flex items-center gap-2"><FileText className="h-4 w-4"/>Assessment</CardTitle></CardHeader>
                <CardContent className="grid grid-cols-1 md:grid-cols-3 gap-3 text-sm">
                  <div>
                    <Label>History</Label>
                    <div className="mt-1 rounded-md border p-2 min-h-[64px] whitespace-pre-wrap">{patient.assessment?.hx ?? "—"}</div>
                  </div>
                  <div>
                    <Label>Exam</Label>
                    <div className="mt-1 rounded-md border p-2 min-h-[64px] whitespace-pre-wrap">{patient.assessment?.exam ?? "—"}</div>
                  </div>
                  <div>
                    <Label>Impression</Label>
                    <div className="mt-1 rounded-md border p-2 min-h-[64px] whitespace-pre-wrap">{patient.assessment?.impression ?? "—"}</div>
                  </div>
                </CardContent>
              </Card>
              {patient.insights && patient.insights.length>0 && (
                <div className="mt-3">
                  <Card>
                    <CardHeader className="pb-2"><CardTitle className="text-base flex items-center gap-2"><BrainCircuit className="h-4 w-4"/>Insights</CardTitle></CardHeader>
                    <CardContent>
                      <ul className="list-disc pl-5 text-sm space-y-1">
                        {patient.insights.map((s, i)=> <li key={i}>{s}</li>)}
                      </ul>
                    </CardContent>
                  </Card>
                </div>
              )}
            </TabsContent>

            {/* VITALS */}
            <TabsContent value="vitals">
              <Card>
                <CardHeader className="pb-2"><CardTitle className="text-base flex items-center gap-2"><Thermometer className="h-4 w-4"/>Observations Timeline</CardTitle></CardHeader>
                <CardContent>
                  <div className="text-sm text-muted-foreground mb-2">(Chart placeholder – plot HR, BP, Temp, RR, SpO₂ vs time)</div>
                  <div className="rounded-md border">
                    <div className="grid grid-cols-6 gap-2 px-3 py-2 text-xs font-semibold bg-muted/50">
                      <div>Time</div><div>Type</div><div>Value</div><div>Unit</div><div>Recorder</div><div>EWS Δ</div>
                    </div>
                    <ScrollArea className="max-h-60">
                      <ul>
                        {patient.observations.slice().sort((a,b)=>b.takenAt.localeCompare(a.takenAt)).map(o => (
                          <li key={o.id} className="grid grid-cols-6 gap-2 px-3 py-2 text-sm border-t">
                            <div>{fmtTime(o.takenAt)}</div>
                            <div>{o.type}</div>
                            <div>{o.value}</div>
                            <div>{o.unit ?? ""}</div>
                            <div>{o.recordedBy}</div>
                            <div>—</div>
                          </li>
                        ))}
                      </ul>
                    </ScrollArea>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            {/* NOTES */}
            <TabsContent value="notes">
              <Card>
                <CardHeader className="pb-2"><CardTitle className="text-base flex items-center gap-2"><FileText className="h-4 w-4"/>Notes</CardTitle></CardHeader>
                <CardContent>
                  <ul className="space-y-2">
                    {patient.notes.slice().sort((a,b)=>b.createdAt.localeCompare(a.createdAt)).map(n => (
                      <li key={n.id} className="rounded-md border p-2">
                        <div className="text-xs text-muted-foreground">{n.author} • {n.authorRole} • {new Date(n.createdAt).toLocaleString()}</div>
                        <div className="text-sm whitespace-pre-wrap mt-1">{n.body}</div>
                      </li>
                    ))}
                  </ul>
                </CardContent>
                <CardFooter className="gap-2">
                  <Input placeholder="Add a note (prototype)" />
                  <Button size="sm">Save</Button>
                </CardFooter>
              </Card>
            </TabsContent>

            {/* DIAGNOSTICS */}
            <TabsContent value="diagnostics">
              <Card>
                <CardHeader className="pb-2"><CardTitle className="text-base flex items-center gap-2"><TestTubes className="h-4 w-4"/>Diagnostics</CardTitle></CardHeader>
                <CardContent>
                  <div className="rounded-md border">
                    <div className="grid grid-cols-6 gap-2 px-3 py-2 text-xs font-semibold bg-muted/50">
                      <div>Kind</div><div>Name</div><div>Status</div><div>Ordered</div><div>Resulted</div><div>Result</div>
                    </div>
                    <ScrollArea className="max-h-56">
                      <ul>
                        {patient.diagnostics.map(d => (
                          <li key={d.id} className="grid grid-cols-6 gap-2 px-3 py-2 text-sm border-t">
                            <div>{d.kind}</div>
                            <div>{d.name}</div>
                            <div>{d.status}</div>
                            <div>{fmtTime(d.orderedAt)}</div>
                            <div>{fmtTime(d.resultedAt)}</div>
                            <div className="truncate" title={d.summary}>{d.summary ?? "—"}</div>
                          </li>
                        ))}
                      </ul>
                    </ScrollArea>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            {/* TASKS */}
            <TabsContent value="tasks">
              <Card>
                <CardHeader className="pb-2"><CardTitle className="text-base flex items-center gap-2"><ClipboardCheck className="h-4 w-4"/>Task Board</CardTitle></CardHeader>
                <CardContent>
                  <ul className="space-y-2">
                    {patient.tasks.map(t => (
                      <li key={t.id} className="flex items-center justify-between rounded-md border p-2">
                        <div className="min-w-0">
                          <div className="text-sm truncate">{t.description}</div>
                          <div className="text-xs text-muted-foreground">Due {fmtTime(t.dueAt)} • {t.source}</div>
                        </div>
                        <div className="flex items-center gap-2">
                          {statusBadge(t.status)}
                          <Button size="sm" variant="outline" onClick={()=>onMarkTask?.(patient.id, t.id, t.status === 'done' ? 'pending' : 'done')}>{t.status==='done' ? 'Undo' : 'Done'}</Button>
                        </div>
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>
            </TabsContent>

            {/* MD‑ONLY: QUICK ORDERS */}
            {role === "md" && (
              <TabsContent value="orders">
                <Card>
                  <CardHeader className="pb-2"><CardTitle className="text-base flex items-center gap-2"><Pill className="h-4 w-4"/>Quick Order Sets</CardTitle></CardHeader>
                  <CardContent className="flex flex-wrap gap-2">
                    {["Sepsis","Stroke","Chest Pain"].map((setName)=> (
                      <Button key={setName} variant="secondary" onClick={()=>onOrderSet?.(patient.id, setName as any)}>{setName}</Button>
                    ))}
                  </CardContent>
                </Card>
              </TabsContent>
            )}

            {/* MD‑ONLY: DISPOSITION */}
            {role === "md" && (
              <TabsContent value="dispo">
                <Card>
                  <CardHeader className="pb-2"><CardTitle className="text-base flex items-center gap-2"><XCircle className="h-4 w-4"/>Disposition</CardTitle></CardHeader>
                  <CardContent className="flex flex-wrap gap-2">
                    {["Admit","Discharge","Refer"].map(d => (
                      <Button key={d} onClick={()=>onDisposition?.(patient.id, d as any)}>{d}</Button>
                    ))}
                  </CardContent>
                </Card>
              </TabsContent>
            )}
          </Tabs>
        </div>
      )}
    </Card>
  );
}

// ---------- Demo Fixture ----------
export const demoPatient: PatientFull = {
  id: "p001",
  name: "Alex Taylor",
  age: 64,
  sex: "M",
  arrival: new Date().toISOString(),
  ats: 2,
  ews: { score: 5, riskLevel: "medium", calculatedAt: new Date().toISOString() },
  chiefComplaint: "Fever, rigors, hypotension",
  location: "Room 3",
  covid: "neg",
  observations: [
    { id: "o1", type: "Temp", value: "38.9", unit: "°C", takenAt: new Date(Date.now()-1000*60*45).toISOString(), recordedBy: "RN Lee" },
    { id: "o2", type: "HR", value: "122", unit: "bpm", takenAt: new Date(Date.now()-1000*60*40).toISOString(), recordedBy: "RN Lee" },
    { id: "o3", type: "BP", value: "88/54", unit: "mmHg", takenAt: new Date(Date.now()-1000*60*30).toISOString(), recordedBy: "RN Lee" },
    { id: "o4", type: "SpO2", value: "93", unit: "%", takenAt: new Date(Date.now()-1000*60*20).toISOString(), recordedBy: "RN Lee" },
  ],
  tasks: [
    { id: "t1", description: "Repeat obs in 30 min", dueAt: new Date(Date.now()+1000*60*10).toISOString(), status: "pending", source: "auto" },
    { id: "t2", description: "Administer IV antibiotics", dueAt: new Date(Date.now()+1000*60*5).toISOString(), status: "overdue", source: "orderSet" },
    { id: "t3", description: "Draw lactate + blood cultures", dueAt: new Date(Date.now()+1000*60*20).toISOString(), status: "pending", source: "orderSet" },
  ],
  diagnostics: [
    { id: "d1", kind: "Lab", name: "CBC", status: "resulted", orderedAt: new Date(Date.now()-1000*60*50).toISOString(), resultedAt: new Date(Date.now()-1000*60*20).toISOString(), summary: "WBC 17 • Hb 128 • Plt 240" },
    { id: "d2", kind: "Lab", name: "Lactate", status: "ordered", orderedAt: new Date(Date.now()-1000*60*15).toISOString() },
    { id: "d3", kind: "Imaging", name: "CXR", status: "in-progress", orderedAt: new Date(Date.now()-1000*60*25).toISOString() },
  ],
  notes: [
    { id: "n1", author: "RN Lee", authorRole: "rn", createdAt: new Date(Date.now()-1000*60*35).toISOString(), body: "Pt febrile, rigors. Fluids commenced. BP low – notified MD." },
    { id: "n2", author: "Dr Smith", authorRole: "md", createdAt: new Date(Date.now()-1000*60*10).toISOString(), body: "Sepsis likely. Broad‑spectrum ABx ordered. Monitor MAP, urine output." },
  ],
  assessment: {
    hx: "48h fever, cough, dysuria. No travel.",
    exam: "Tachycardic, hypotensive, warm peripheries.",
    impression: "Sepsis – likely urinary source",
  },
  insights: [
    "EWS ≥5: repeat obs every 30 min.",
    "ABx administered ≥60 min from triage if sepsis suspected.",
  ],
};
