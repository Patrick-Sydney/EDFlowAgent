Perfect 🙌 — a **Space Summary Bar** is exactly what a **Charge Nurse** (or Ops lead) needs at a glance:

* “How many treatment spaces are free?”
* “Where are the bottlenecks?”
* “Do I need to start boarding in corridors?”

Let’s design it clean + touch-first, then I’ll show you code you can drop into Replit.

---

# 📊 Space Summary Bar — Concept

### Placement

* Appears at the **top of Charge Nurse view** (above the lanes).
* Sticky so it stays visible while scrolling.

### Contents

* **Overall counts:** Available / Cleaning / Occupied / Blocked.
* **Breakdown by Zone (A, B, C, FT, Paeds):** small chip-style counters.
* Color-coded badges consistent with your drawer:

  * 🟢 Available
  * 🟠 Cleaning
  * 🔴 Occupied
  * ⚪ Blocked

---

# 🖼️ Sketch

```
---------------------------------------------------------------
Treatment Spaces   🟢 8 Available   🟠 3 Cleaning   🔴 15 Occupied   ⚪ 2 Blocked
Zone A: 🟢 2 🟠 1 🔴 5
Zone B: 🟢 1 🟠 0 🔴 3 ⚪ 1
FT:     🟢 3 🔴 2
Paeds:  🟢 2 🟠 2 🔴 5
---------------------------------------------------------------
```

* Each count is **tap-able** (future: filter the space drawer).
* On mobile, chips wrap onto multiple lines.
* On desktop, one clean bar.

---

# 🔌 Implementation (React/Tailwind)

**File: `client/src/components/SpaceSummaryBar.jsx`**

```jsx
import { useEffect, useMemo } from "react";
import { useED } from "../store";

const STATUS = {
  available: { txt:"Available", cls:"bg-emerald-100 text-emerald-700" },
  cleaning:  { txt:"Cleaning",  cls:"bg-amber-100 text-amber-700" },
  occupied:  { txt:"Occupied",  cls:"bg-rose-100 text-rose-700" },
  blocked:   { txt:"Blocked",   cls:"bg-gray-200 text-gray-700" },
};

export default function SpaceSummaryBar() {
  const { spaces, loadSpaces } = useED();

  useEffect(()=>{ loadSpaces(); }, []);

  const counts = useMemo(()=>{
    const byStatus = { available:0, cleaning:0, occupied:0, blocked:0 };
    const byZone = {};
    for (const s of spaces) {
      byStatus[s.status] = (byStatus[s.status]||0)+1;
      if (!byZone[s.zone]) byZone[s.zone] = { available:0, cleaning:0, occupied:0, blocked:0 };
      byZone[s.zone][s.status] = (byZone[s.zone][s.status]||0)+1;
    }
    return { byStatus, byZone };
  }, [spaces]);

  return (
    <div className="sticky top-0 z-20 bg-white border-b p-3">
      <div className="flex flex-wrap items-center gap-3 mb-2">
        <h3 className="font-semibold text-sm sm:text-base">Treatment Spaces</h3>
        {Object.entries(counts.byStatus).map(([k,v])=>(
          <span key={k} className={`px-2 py-0.5 rounded-full text-xs ${STATUS[k].cls}`}>
            {STATUS[k].txt}: {v}
          </span>
        ))}
      </div>
      <div className="flex flex-wrap gap-3 text-xs">
        {Object.entries(counts.byZone).map(([zone,vals])=>(
          <div key={zone} className="flex items-center gap-1">
            <span className="font-medium">Zone {zone}:</span>
            {Object.entries(vals).map(([k,v])=> v>0 && (
              <span key={k} className={`px-1.5 py-0.5 rounded-full ${STATUS[k].cls}`}>
                {v}
              </span>
            ))}
          </div>
        ))}
      </div>
    </div>
  );
}
```

---

# 🔗 Wire it into Charge Nurse view

**File: `client/src/App.jsx` (or Charge view wrapper):**

```diff
+import SpaceSummaryBar from "./components/SpaceSummaryBar";

 {roleView === "charge" && (
-  <main className="...">
+  <main className="...">
+    <SpaceSummaryBar />
     {/* then your lanes */}
  </main>
 )}
```

---

# ✅ Benefits

* **At a glance:** charge can see how many spaces are clogged/cleaning.
* **Zone breakdown:** quickly see if one zone is worse than others.
* **Future hooks:** tap a badge to auto-filter the **Room Management drawer**.

---

👉 Want me to extend this so that **tapping a count chip** actually **filters the space list** in the **Room Management Drawer** (so Charge can jump straight from summary → allocation)?
