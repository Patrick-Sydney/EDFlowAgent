Great catch. Let’s split **Role** and **Scenarios** like mobile and remove the “dropdown inside a dropdown” feel. We’ll:

* Replace the combined menu with **two compact popovers** in the header: **Role** and **Scenarios**.
* Keep them available on **tablet and desktop** (and mobile, if you want).
* Restore the scenarios list (Baseline, Surge, and demo cohorts like Sepsis/Stroke/Chest Pain).

Here’s a **single patch** you can apply.

---

### `header-split-role-scenarios.patch`

```diff
*** Begin Patch
*** Add File: client/src/components/shell/RoleMenu.tsx
+import React, { useEffect, useId, useRef, useState } from "react";
+
+/** A single-layer popover that shows the existing RoleSelector control. */
+export default function RoleMenu({ RoleSelector }: { RoleSelector: React.ReactNode }) {
+  const [open, setOpen] = useState(false);
+  const btnRef = useRef<HTMLButtonElement|null>(null);
+  const popRef = useRef<HTMLDivElement|null>(null);
+  const id = useId();
+
+  useEffect(() => {
+    if (!open) return;
+    const onKey = (e: KeyboardEvent) => e.key === "Escape" && setOpen(false);
+    const onClick = (e: MouseEvent) => {
+      if (!popRef.current || !btnRef.current) return;
+      if (popRef.current.contains(e.target as Node) || btnRef.current.contains(e.target as Node)) return;
+      setOpen(false);
+    };
+    window.addEventListener("keydown", onKey);
+    window.addEventListener("mousedown", onClick);
+    return () => { window.removeEventListener("keydown", onKey); window.removeEventListener("mousedown", onClick); };
+  }, [open]);
+
+  return (
+    <div className="relative">
+      <button
+        ref={btnRef}
+        type="button"
+        aria-haspopup="menu"
+        aria-expanded={open}
+        aria-controls={id}
+        className="rounded-xl border px-3 py-1.5 text-sm hover:bg-muted/60"
+        onClick={() => setOpen(v => !v)}
+      >
+        Role
+      </button>
+      {open && (
+        <div
+          ref={popRef}
+          id={id}
+          role="menu"
+          className="absolute z-[1200] mt-2 w-[min(92vw,320px)] rounded-2xl border bg-background shadow-xl p-3 right-0"
+        >
+          <div className="text-xs font-medium text-muted-foreground px-1 pb-2">Role view</div>
+          <div className="rounded-xl border p-2">
+            {RoleSelector}
+          </div>
+        </div>
+      )}
+    </div>
+  );
+}
+
*** End Patch
*** Add File: client/src/components/shell/ScenariosMenu.tsx
+import React, { useEffect, useId, useRef, useState } from "react";
+
+type Scenario = { key: string; label: string; subtitle?: string };
+
+const SCENARIOS: Scenario[] = [
+  { key: "baseline", label: "Baseline", subtitle: "Normal load" },
+  { key: "surge", label: "Surge", subtitle: "High volume" },
+  { key: "cohort-sepsis", label: "Sepsis cohort", subtitle: "Sepsis/abx timing" },
+  { key: "cohort-stroke", label: "Stroke cohort", subtitle: "FAST/CT flow" },
+  { key: "cohort-chestpain", label: "Chest pain cohort", subtitle: "ACS workup" },
+];
+
+export default function ScenariosMenu({ onRun }: { onRun?: (key: string)=>void }) {
+  const [open, setOpen] = useState(false);
+  const btnRef = useRef<HTMLButtonElement|null>(null);
+  const popRef = useRef<HTMLDivElement|null>(null);
+  const id = useId();
+
+  useEffect(() => {
+    if (!open) return;
+    const onKey = (e: KeyboardEvent) => e.key === "Escape" && setOpen(false);
+    const onClick = (e: MouseEvent) => {
+      if (!popRef.current || !btnRef.current) return;
+      if (popRef.current.contains(e.target as Node) || btnRef.current.contains(e.target as Node)) return;
+      setOpen(false);
+    };
+    window.addEventListener("keydown", onKey);
+    window.addEventListener("mousedown", onClick);
+    return () => { window.removeEventListener("keydown", onKey); window.removeEventListener("mousedown", onClick); };
+  }, [open]);
+
+  const run = (key: string) => {
+    onRun?.(key);
+    // Also broadcast for any global listeners already in your app
+    window.dispatchEvent(new CustomEvent("scenario:run", { detail: { key } }));
+    setOpen(false);
+  };
+
+  return (
+    <div className="relative">
+      <button
+        ref={btnRef}
+        type="button"
+        aria-haspopup="menu"
+        aria-expanded={open}
+        aria-controls={id}
+        className="rounded-xl border px-3 py-1.5 text-sm hover:bg-muted/60"
+        onClick={() => setOpen(v => !v)}
+      >
+        Scenarios
+      </button>
+      {open && (
+        <div
+          ref={popRef}
+          id={id}
+          role="menu"
+          className="absolute z-[1200] mt-2 w-[min(92vw,360px)] rounded-2xl border bg-background shadow-xl p-2 right-0"
+        >
+          <ul className="max-h-[60vh] overflow-auto">
+            {SCENARIOS.map(s => (
+              <li key={s.key}>
+                <button
+                  role="menuitem"
+                  className="w-full text-left rounded-xl px-3 py-2 hover:bg-muted/60"
+                  onClick={() => run(s.key)}
+                >
+                  <div className="text-sm">{s.label}</div>
+                  {s.subtitle && <div className="text-xs text-muted-foreground">{s.subtitle}</div>}
+                </button>
+              </li>
+            ))}
+          </ul>
+        </div>
+      )}
+    </div>
+  );
+}
+
*** End Patch
*** Update File: client/src/components/shell/AppHeader.tsx
@@
-import CombinedAppMenu from "./CombinedAppMenu";
+import RoleMenu from "./RoleMenu";
+import ScenariosMenu from "./ScenariosMenu";
 
 export default function AppHeader() {
   return (
     <header className="sticky top-0 z-[900] w-full bg-background/70 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b">
-      {/* Unified compact header on ALL breakpoints (mobile-style for tablet & desktop too) */}
-      <div className="mx-auto max-w-[1600px] px-3 md:px-4 lg:px-6 py-2 lg:py-2 flex items-center justify-between gap-2">
-        {/* Left: app logo opens Combined menu (Role + Scenarios) on all screens */}
-        <div className="flex items-center gap-2">
-          <CombinedAppMenu
-            Logo={<AppLogo />}
-            RoleSelector={<RoleSelector compact />}
-            onOpenScenarios={() => window.dispatchEvent(new CustomEvent("ui:open-scenarios"))}
-          />
-        </div>
-        {/* Right: live clock */}
-        <div className="flex items-center gap-2">
-          <LiveClock />
-        </div>
-      </div>
+      {/* Compact header across mobile/tablet/desktop */}
+      <div className="mx-auto max-w-[1600px] px-3 md:px-4 lg:px-6 py-2 flex items-center justify-between gap-2">
+        {/* Left cluster: logo + split controls */}
+        <div className="flex items-center gap-2">
+          <AppLogo />
+          <RoleMenu RoleSelector={<RoleSelector compact />} />
+          <ScenariosMenu />
+        </div>
+        {/* Right cluster */}
+        <div className="flex items-center gap-2">
+          <LiveClock />
+        </div>
+      </div>
     </header>
   );
 }
 
 // You likely already have these wired; kept here for context.
 function AppLogo() {
   return (
     <div className="h-8 w-8 rounded-xl bg-primary/10 grid place-items-center text-primary font-bold">
       ED
     </div>
   );
 }
 
 function RoleSelector({ compact = false }: { compact?: boolean }) {
   // Use your real selector; compact can render a tighter control.
   return <div className={compact ? "text-sm" : ""}>Role</div>;
 }
 
 function LiveClock() {
   return <div className="text-sm tabular-nums text-muted-foreground">Live • 12:34</div>;
 }
*** End Patch
```

---

## How to apply

```bash
git checkout -b ui/header-split-role-scenarios
printf "%s\n" 'PASTE THE PATCH ABOVE HERE' > header-split-role-scenarios.patch
git apply --reject --whitespace=fix header-split-role-scenarios.patch
git add -A
git commit -m "Header: split Role and Scenarios menus; restore multiple scenarios; remove nested dropdown"
```

### Notes

* **Role menu**: uses your existing `RoleSelector` inside a **single** popover—so it’s *not* a dropdown within another dropdown.
* **Scenarios menu**: includes **Baseline, Surge, Sepsis cohort, Stroke cohort, Chest pain cohort**. It fires a `scenario:run` event with the scenario key; hook this into your scenario loader or replace `onRun` with a direct call.
* Header remains compact on **tablet & desktop** and won’t overflow.

If you want the **logo** to also open a quick menu with app-wide settings later, we can add that as a separate, third button.
