Love this—perfect for fast, thumb-friendly intake. Here’s a **copy-pasteable Replit patch prompt** to upgrade the **Register Patient** drawer UI with:

* **Sex**: M / F **toggle buttons** (single-select).
* **Age**: a **Set Age** button that opens a **digit pad (0–9)**; confirm with **Set Age**.
  (e.g., “45” = open → 4 → 5 → confirm = **max 4 taps**)
* **ATS**: **1–5 buttons** (no dropdown).

---

# Patch: Faster Register UI (Sex toggle, Age digit pad, ATS buttons)

## 1) Add a tiny icon (optional) for backspace

**Create:** `client/src/components/ui/BackspaceIcon.jsx`

```jsx
export default function BackspaceIcon({ className = "w-5 h-5" }) {
  return (
    <svg viewBox="0 0 24 24" className={className} fill="none" stroke="currentColor" strokeWidth="2">
      <path d="M22 6H9L3 12l6 6h13V6z" />
      <path d="M12 9l6 6M18 9l-6 6" />
    </svg>
  );
}
```

---

## 2) Update the Register drawer UI

**File:** `client/src/components/RegisterDrawer.jsx`

```diff
 import { useState } from "react";
 import { useED } from "../store";
 import TButton from "./ui/TButton";
 import NumberField from "./ui/NumberField";
+import BackspaceIcon from "./ui/BackspaceIcon";

 export default function RegisterDrawer() {
   const { registerOpen, closeRegister, register } = useED();
   const [form, setForm] = useState({
-    name: "", age: "", sex: "F",
+    name: "", age: "", sex: "F",
     complaint: "",
     nhi: "",
     isolationRequired: false,
     triageBypass: false,
     provisionalAts: false,
-    ats: "",
+    ats: "",
     arrivalTime: "" // optional ISO or empty
   });
 
   const on = (k, v) => setForm(s => ({ ...s, [k]: v }));
   const toggle = (k) => setForm(s => ({ ...s, [k]: !s[k] }));
+  const [agePadOpen, setAgePadOpen] = useState(false);
+  const [ageBuffer, setAgeBuffer] = useState("");

   if (!registerOpen) return null;
@@
         {/* Form */}
         <form
           onSubmit={submit}
           className="flex-1 overflow-y-auto px-4 py-3 space-y-4"
           onKeyDown={(e)=>{ if(e.key==='Enter' && e.target.tagName==='INPUT') e.preventDefault(); }}
         >
           {/* Identity */}
           <div>
             <h4 className="font-semibold mb-2">Patient details</h4>
-            <div className="grid grid-cols-2 gap-3">
-              <label className="text-sm col-span-2">Full name
+            <div className="grid grid-cols-2 gap-3">
+              <label className="text-sm col-span-2">Full name
                 <input className="mt-1 w-full border rounded px-3 py-3 text-base"
                        value={form.name} onChange={e=>on("name", e.target.value)} required />
               </label>
-              <NumberField label="Age" value={form.age} onChange={v=>on("age", v)} min={0} max={120} />
-              <label className="text-sm">Sex
-                <select className="mt-1 w-full border rounded px-3 py-3 text-base"
-                        value={form.sex} onChange={e=>on("sex", e.target.value)}>
-                  <option value="F">F</option>
-                  <option value="M">M</option>
-                </select>
-              </label>
+              {/* Age — Set Age button opens quick digit pad */}
+              <div className="text-sm">
+                <div className="flex items-center justify-between">
+                  <span>Age</span>
+                  {form.age !== "" && <span className="text-xs text-gray-500">Current: {form.age}</span>}
+                </div>
+                <button
+                  type="button"
+                  className="mt-1 w-full border rounded-xl px-3 py-3 text-base bg-gray-50"
+                  onClick={()=>{ setAgeBuffer(String(form.age || "")); setAgePadOpen(true); }}
+                >
+                  Set Age
+                </button>
+              </div>
+              {/* Sex — M / F toggle buttons */}
+              <div className="text-sm">
+                <span>Sex</span>
+                <div className="mt-1 grid grid-cols-2 gap-2">
+                  <button
+                    type="button"
+                    aria-pressed={form.sex === "F"}
+                    onClick={()=>on("sex","F")}
+                    className={`px-3 py-3 rounded-xl border text-base ${form.sex==="F" ? "bg-blue-600 text-white border-blue-600" : "bg-white"}`}
+                  >F</button>
+                  <button
+                    type="button"
+                    aria-pressed={form.sex === "M"}
+                    onClick={()=>on("sex","M")}
+                    className={`px-3 py-3 rounded-xl border text-base ${form.sex==="M" ? "bg-blue-600 text-white border-blue-600" : "bg-white"}`}
+                  >M</button>
+                </div>
+              </div>
               <label className="text-sm col-span-2">NHI (optional)
                 <input className="mt-1 w-full border rounded px-3 py-3 text-base"
                        value={form.nhi} onChange={e=>on("nhi", e.target.value)} />
               </label>
               <label className="text-sm col-span-2">Arrival time (optional ISO)
                 <input className="mt-1 w-full border rounded px-3 py-3 text-base"
                        placeholder="2025-08-26T14:30:00"
                        value={form.arrivalTime} onChange={e=>on("arrivalTime", e.target.value)} />
               </label>
             </div>
           </div>
@@
           {/* Flags */}
           <div>
             <h4 className="font-semibold mb-2">Flags</h4>
             <div className="flex flex-wrap gap-4">
               <label className="flex items-center gap-2 py-2 touch-target">
                 <input type="checkbox" className="w-5 h-5"
                        checked={form.isolationRequired} onChange={()=>toggle("isolationRequired")} />
                 <span>Isolation required</span>
               </label>
               <label className="flex items-center gap-2 py-2 touch-target">
                 <input type="checkbox" className="w-5 h-5"
                        checked={form.triageBypass} onChange={()=>toggle("triageBypass")} />
                 <span>Triage bypass (critical)</span>
               </label>
               <label className="flex items-center gap-2 py-2 touch-target">
                 <input type="checkbox" className="w-5 h-5"
                        checked={form.provisionalAts} onChange={()=>toggle("provisionalAts")} />
                 <span>Provisional ATS from ambulance</span>
               </label>
-              <div className="flex items-center gap-2 py-2">
-                <span className="text-sm">ATS</span>
-                <select className="border rounded px-3 py-3 text-base"
-                        value={form.ats} onChange={e=>on("ats", e.target.value)}>
-                  <option value="">—</option>
-                  <option value="1">1</option>
-                  <option value="2">2</option>
-                  <option value="3">3</option>
-                  <option value="4">4</option>
-                  <option value="5">5</option>
-                </select>
-              </div>
+              {/* ATS — 1..5 buttons */}
+              <div className="flex items-center gap-2 py-2">
+                <span className="text-sm mr-1">ATS</span>
+                <div className="grid grid-cols-5 gap-2">
+                  {[1,2,3,4,5].map(n=>(
+                    <button
+                      key={n}
+                      type="button"
+                      aria-pressed={String(form.ats) === String(n)}
+                      onClick={()=>on("ats", String(n))}
+                      className={`px-3 py-3 rounded-xl border text-base min-w-[48px]
+                        ${String(form.ats)===String(n) ? "bg-emerald-600 text-white border-emerald-600" : "bg-white"}`}
+                    >
+                      {n}
+                    </button>
+                  ))}
+                </div>
+                <button
+                  type="button"
+                  className="ml-2 px-3 py-3 rounded-xl border text-base"
+                  onClick={()=>on("ats","")}
+                  title="Clear ATS"
+                >
+                  Clear
+                </button>
+              </div>
             </div>
           </div>
         </form>
@@
       </div>
+
+      {/* AGE DIGIT PAD (bottom overlay inside drawer area) */}
+      {agePadOpen && (
+        <div className="absolute inset-x-0 bottom-0 z-50">
+          <div className="mx-auto max-w-full sm:max-w-[520px] bg-white border-t shadow-2xl">
+            <div className="px-4 py-2 border-b flex items-center justify-between">
+              <div className="text-sm font-medium">Set Age</div>
+              <div className="text-sm text-gray-500">Current: {ageBuffer || "—"}</div>
+            </div>
+            <div className="p-3 grid grid-cols-3 gap-2">
+              {[1,2,3,4,5,6,7,8,9].map(d=>(
+                <button
+                  key={d}
+                  className="px-4 py-4 text-lg rounded-xl border bg-white active:scale-[0.99]"
+                  onClick={()=>setAgeBuffer(prev => (prev + String(d)).slice(0,3))}
+                >{d}</button>
+              ))}
+              <button
+                className="px-4 py-4 text-lg rounded-xl border bg-white active:scale-[0.99]"
+                onClick={()=>setAgeBuffer(prev => (prev + "0").slice(0,3))}
+              >0</button>
+              <button
+                aria-label="Backspace"
+                className="px-4 py-4 text-lg rounded-xl border bg-white active:scale-[0.99] flex items-center justify-center"
+                onClick={()=>setAgeBuffer(prev => prev.slice(0,-1))}
+              >
+                <BackspaceIcon />
+              </button>
+              <button
+                className="px-4 py-4 text-lg rounded-xl border bg-gray-50 active:scale-[0.99]"
+                onClick={()=>{ setAgeBuffer(""); }}
+              >Clear</button>
+            </div>
+            <div className="p-3 border-t flex gap-2">
+              <TButton
+                className="bg-blue-600 text-white flex-1"
+                onClick={()=>{
+                  const n = Number(ageBuffer);
+                  if (Number.isFinite(n) && n >= 0 && n <= 120) {
+                    on("age", String(n));
+                    setAgePadOpen(false);
+                  } else {
+                    alert("Enter a valid age 0–120");
+                  }
+                }}
+              >
+                Set Age
+              </TButton>
+              <TButton className="border bg-white" onClick={()=>setAgePadOpen(false)}>Cancel</TButton>
+            </div>
+          </div>
+        </div>
+      )}
     </div>
   );
 }
```

---

### Notes & Behavior

* **Sex**: two large buttons; only one is active (blue).
* **Age**: tapping **Set Age** opens a bottom **digit pad** inside the drawer (mobile-friendly).

  * Tap digits **0–9** to build the age (max 3 digits, 0–120).
  * **Backspace**, **Clear**, then **Set Age** to confirm (or **Cancel**).
  * “45” flow = open → **4** → **5** → **Set Age** (**4 taps total**).
* **ATS**: buttons 1–5 with a **Clear** option; the selected button is emerald-filled.

Everything remains accessible with keyboard/mouse on desktop.

---

## ✅ Acceptance

* Register drawer now uses **Sex** toggle, **Age** digit pad, and **ATS** buttons.
* All controls are **touch-friendly** (≥44px targets).
* Entering “45” requires **max 4 taps**.
* Submission still creates a **Waiting** encounter via SSE.

Want me to mirror the **ATS buttons** style into the **Triage drawer** as well (so ATS input looks consistent across the app)?
