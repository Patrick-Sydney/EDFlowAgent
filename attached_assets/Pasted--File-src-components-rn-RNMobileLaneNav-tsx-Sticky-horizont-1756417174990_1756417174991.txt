// =============================
// File: src/components/rn/RNMobileLaneNav.tsx
// Sticky horizontal pill bar for phone; taps scroll to lane sections
// =============================
import React, { useEffect, useMemo, useRef, useState } from "react";
import clsx from "clsx";

export type LanePill = {
  id: string;      // DOM id of the lane <section id="...">
  label: string;   // e.g. "Waiting"
  count: number;   // number badge
};

export default function RNMobileLaneNav({
  lanes,
  stickyOffset = 88,   // px; sits under your app header on iOS
}: {
  lanes: LanePill[];
  stickyOffset?: number;
}) {
  const [active, setActive] = useState(lanes[0]?.id);
  const observers = useRef<IntersectionObserver | null>(null);

  // Observe lane sections to highlight active pill
  useEffect(() => {
    observers.current?.disconnect();
    const io = new IntersectionObserver(
      (entries) => {
        const vis = entries
          .filter((e) => e.isIntersecting)
          .sort((a, b) => a.boundingClientRect.top - b.boundingClientRect.top)[0];
        if (vis) setActive((vis.target as HTMLElement).id);
      },
      { rootMargin: `-${Math.max(stickyOffset - 12, 0)}px 0px -60% 0px`, threshold: 0.01 }
    );
    lanes.forEach((l) => {
      const el = document.getElementById(l.id);
      if (el) io.observe(el);
    });
    observers.current = io;
    return () => io.disconnect();
  }, [lanes, stickyOffset]);

  return (
    <div
      className="sticky z-30 bg-background/85 backdrop-blur supports-[backdrop-filter]:bg-background/70"
      style={{ top: `calc(env(safe-area-inset-top) + ${stickyOffset}px)` }}
    >
      <div className="flex gap-8 overflow-x-auto px-3 py-2 no-scrollbar">
        {lanes.map((l) => (
          <button
            key={l.id}
            className={clsx(
              "shrink-0 rounded-full px-3 py-2 text-sm border",
              active === l.id ? "bg-primary text-primary-foreground" : "bg-muted"
            )}
            onClick={() =>
              document.getElementById(l.id)?.scrollIntoView({ behavior: "smooth", block: "start" })
            }
            aria-label={`Go to ${l.label}`}
          >
            <span>{l.label}</span>
            <span className="ml-2 text-xs rounded-full bg-background/60 px-1.5">{l.count}</span>
          </button>
        ))}
      </div>
    </div>
  );
}

// (Optional) drop this in your globals.css to hide scrollbars on the pills row
// .no-scrollbar { -ms-overflow-style: none; scrollbar-width: none; }
// .no-scrollbar::-webkit-scrollbar { display: none; }


// =============================
// File: src/components/rn/PatientCardCompact.tsx
// Phone‑first patient card with primary action and quick chips
// =============================
import React from "react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Clock, User } from "lucide-react";

export type PatientCardCompactProps = {
  name: string;
  status: string;        // e.g., "Waiting" | "In Triage" | "Room 4"
  timer?: string;        // e.g., "23m waiting"
  complaint?: string;    // chief complaint snippet
  ews?: number;
  onPrimary?: () => void;
  primaryLabel?: string; // e.g., "Start Triage" | "+ Obs"
  onOpen?: () => void;   // open full card / drawer
  rightExtras?: React.ReactNode; // optional extra actions/icons
};

export function PatientCardCompact(props: PatientCardCompactProps) {
  const { name, status, timer, complaint, ews, onPrimary, primaryLabel = "+ Obs", onOpen, rightExtras } = props;
  return (
    <div className="rounded-2xl border bg-card p-3 active:scale-[0.99]" onClick={onOpen} role="button">
      <div className="flex items-center gap-2 justify-between">
        <div className="min-w-0">
          <div className="flex items-center gap-2">
            <User className="h-4 w-4 text-muted-foreground" />
            <div className="font-semibold text-lg truncate max-w-[58vw] sm:max-w-[40ch]">{name}</div>
            {typeof ews === "number" && <Badge variant="outline">EWS {ews}</Badge>}
          </div>
          <div className="mt-0.5 flex items-center gap-2 text-xs text-muted-foreground">
            <span className="rounded-full bg-muted px-2 py-0.5">{status}</span>
            {timer && (
              <span className="flex items-center gap-1"><Clock className="h-3 w-3" />{timer}</span>
            )}
          </div>
          {complaint && <div className="mt-1 text-sm text-muted-foreground truncate">{complaint}</div>}
        </div>
        <div className="ml-2 flex items-center gap-2" onClick={(e) => e.stopPropagation()}>
          {rightExtras}
          <Button className="h-11 rounded-full px-4" onClick={onPrimary}>{primaryLabel}</Button>
        </div>
      </div>
      {/* quick chips row (optional) */}
      <div className="mt-2 flex gap-2" onClick={(e) => e.stopPropagation()}>
        <Button size="sm" variant="outline" className="rounded-full">Details</Button>
        <Button size="sm" variant="outline" className="rounded-full">+ Obs</Button>
      </div>
    </div>
  );
}


// =============================
// File: src/views/RNViewMobile.tsx
// Phone‑first RN view: sticky lane pills + one lane per screen
// =============================
import React, { useMemo } from "react";
import RNMobileLaneNav, { LanePill } from "@/components/rn/RNMobileLaneNav";
import { PatientCardCompact } from "@/components/rn/PatientCardCompact";

// Shape the data your page already has
export type PatientLite = {
  id: string;
  givenName?: string; familyName?: string; displayName?: string;
  chiefComplaint?: string;
  waitingFor?: string;       // e.g. "23m waiting"
  ews?: number;
  roomName?: string | null;
};

export type Lane = { id: string; label: string; patients: PatientLite[] };

export default function RNViewMobile({ lanes, onStartTriage, onOpenObs, onOpenCard }: {
  lanes: Lane[];                                       // Waiting / InTriage / Room
  onStartTriage: (p: PatientLite) => void;
  onOpenObs: (p: PatientLite) => void;
  onOpenCard: (p: PatientLite) => void;
}) {
  const pills: LanePill[] = useMemo(
    () => lanes.map((l) => ({ id: l.id, label: l.label, count: l.patients.length })),
    [lanes]
  );

  return (
    <div className="pb-24">
      <RNMobileLaneNav lanes={pills} />

      <div className="mx-3 space-y-6 md:grid md:grid-cols-2 md:gap-6 md:space-y-0">
        {lanes.map((lane) => (
          <section key={lane.id} id={lane.id} className="scroll-mt-24">
            <div className="sticky top-[calc(env(safe-area-inset-top)+132px)] z-20 bg-background/85 backdrop-blur px-1 py-2">
              <h2 className="text-base font-semibold">
                {lane.label} <span className="text-muted-foreground">({lane.patients.length})</span>
              </h2>
            </div>
            <div className="mt-2 space-y-3">
              {lane.patients.map((p) => {
                const name = p.displayName || `${p.givenName ?? ''} ${p.familyName ?? ''}`.trim() || '—';
                const status = lane.label === "Room" ? (p.roomName ?? "Rooming") : lane.label;
                const primaryLabel = lane.label === "Waiting" ? "Start Triage" : "+ Obs";
                const onPrimary = () => (lane.label === "Waiting" ? onStartTriage(p) : onOpenObs(p));
                return (
                  <PatientCardCompact
                    key={p.id}
                    name={name}
                    status={status}
                    timer={p.waitingFor}
                    complaint={p.chiefComplaint}
                    ews={p.ews}
                    primaryLabel={primaryLabel}
                    onPrimary={onPrimary}
                    onOpen={() => onOpenCard(p)}
                  />
                );
              })}
            </div>
          </section>
        ))}
      </div>
    </div>
  );
}


// =============================
// File: src/views/RNView.adapter.tsx (optional)
// Detect small screens; render mobile RN view, otherwise keep your current RN desk view
// =============================
import React from "react";
import RNViewMobile, { Lane, PatientLite } from "./RNViewMobile";

export default function RNViewAdapter(props: {
  lanes: Lane[];
  onStartTriage: (p: PatientLite) => void;
  onOpenObs: (p: PatientLite) => void;
  onOpenCard: (p: PatientLite) => void;
  DeskView?: React.ComponentType<any>; // your existing RN view
}) {
  const isPhone = typeof window !== 'undefined' && window.matchMedia('(max-width: 768px)').matches; // md breakpoint
  const { DeskView, ...rest } = props as any;
  if (isPhone || !DeskView) return <RNViewMobile {...rest} />;
  return <DeskView {...rest} />;
}

// =============================
// Wiring notes
// 1) Import RNViewAdapter where you currently render the RN view page and feed it
//    the lanes and handlers you already have.
// 2) Replace the old wide counters row with <RNMobileLaneNav> — on desktop keep existing summary.
// 3) Ensure each lane <section> has id matching the pill id for smooth scroll.
// 4) Optional: add the CSS snippet for .no-scrollbar to your global styles.
