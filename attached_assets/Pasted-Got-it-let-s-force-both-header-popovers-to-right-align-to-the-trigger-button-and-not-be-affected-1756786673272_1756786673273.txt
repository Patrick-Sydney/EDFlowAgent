Got it—let’s force both header popovers to **right-align to the trigger button** and not be affected by container width. The fix:

* Make the trigger wrapper `inline-block`/`shrink-0` so it doesn’t stretch.
* On open, **position the popover with `position: fixed`** using the button’s bounding rect, with `right = window.innerWidth - button.right` (so the menu’s **right edge matches the button’s right edge**).
* Recalculate on window **resize/scroll**.

Here’s a **small patch** for both menus.

---

### `fix-popover-right-align-fixed.patch`

```diff
*** Begin Patch
*** Update File: client/src/components/shell/RoleMenu.tsx
@@
-  const id = useId();
+  const id = useId();
+  const [coords, setCoords] = useState<{top:number; right:number} | null>(null);
+
+  const recalc = () => {
+    const btn = btnRef.current;
+    if (!btn) return;
+    const r = btn.getBoundingClientRect();
+    setCoords({ top: r.bottom + 8, right: Math.max(8, window.innerWidth - r.right) });
+  };
 
   useEffect(() => {
-    if (!open) return;
+    if (!open) return;
     const onKey = (e: KeyboardEvent) => e.key === "Escape" && setOpen(false);
     const onClick = (e: MouseEvent) => {
       if (!popRef.current || !btnRef.current) return;
       if (popRef.current.contains(e.target as Node) || btnRef.current.contains(e.target as Node)) return;
       setOpen(false);
     };
+    recalc();
+    const onResize = () => recalc();
+    const onScroll = () => recalc();
     window.addEventListener("keydown", onKey);
     window.addEventListener("mousedown", onClick);
+    window.addEventListener("resize", onResize);
+    window.addEventListener("scroll", onScroll, true);
     return () => { window.removeEventListener("keydown", onKey); window.removeEventListener("mousedown", onClick); 
-    };
+      window.removeEventListener("resize", onResize); window.removeEventListener("scroll", onScroll, true); };
   }, [open]);
 
   return (
-    <div className="relative">
+    <div className="relative inline-block shrink-0">
       <button
         ref={btnRef}
         type="button"
         aria-haspopup="menu"
         aria-expanded={open}
         aria-controls={id}
         className="rounded-xl border px-3 py-1.5 text-sm hover:bg-muted/60"
         onClick={() => setOpen(v => !v)}
       >
         Role
       </button>
       {open && (
         <div
           ref={popRef}
           id={id}
           role="menu"
-          className="absolute z-[1200] mt-2 w-[min(92vw,320px)] rounded-2xl border bg-background shadow-xl p-3 right-0 origin-top-right"
-          style={{ right: 0, left: "auto", transformOrigin: "top right" }}
+          className="z-[1200] w-[min(92vw,320px)] rounded-2xl border bg-background shadow-xl p-3 origin-top-right"
+          style={{ position: "fixed", top: coords?.top, right: coords?.right, left: "auto", transformOrigin: "top right" }}
         >
           <div className="text-xs font-medium text-muted-foreground px-1 pb-2">Role view</div>
           <div className="flex items-center gap-1 flex-wrap">
             {ORDER.map(k => (
               <button
*** End Patch
*** Update File: client/src/components/shell/ScenariosMenu.tsx
@@
-  const id = useId();
+  const id = useId();
+  const [coords, setCoords] = useState<{top:number; right:number} | null>(null);
+  const btnRect = () => {
+    const b = btnRef.current?.getBoundingClientRect();
+    if (!b) return null;
+    return { top: b.bottom + 8, right: Math.max(8, window.innerWidth - b.right) };
+  };
 
   useEffect(() => {
-    if (!open) return;
+    if (!open) return;
     const onKey = (e: KeyboardEvent) => e.key === "Escape" && setOpen(false);
     const onClick = (e: MouseEvent) => {
       if (!popRef.current || !btnRef.current) return;
       if (popRef.current.contains(e.target as Node) || btnRef.current.contains(e.target as Node)) return;
       setOpen(false);
     };
+    const recalc = () => {
+      const c = btnRect();
+      if (c) setCoords(c);
+    };
+    recalc();
+    const onResize = () => recalc();
+    const onScroll = () => recalc();
     window.addEventListener("keydown", onKey);
     window.addEventListener("mousedown", onClick);
+    window.addEventListener("resize", onResize);
+    window.addEventListener("scroll", onScroll, true);
     return () => { window.removeEventListener("keydown", onKey); window.removeEventListener("mousedown", onClick); 
-    };
+      window.removeEventListener("resize", onResize); window.removeEventListener("scroll", onScroll, true); };
   }, [open]);
@@
-    <div className="relative">
+    <div className="relative inline-block shrink-0">
       <button
         ref={btnRef}
         type="button"
         aria-haspopup="menu"
         aria-expanded={open}
         aria-controls={id}
         className="rounded-xl border px-3 py-1.5 text-sm hover:bg-muted/60"
         onClick={() => setOpen(v => !v)}
       >
         Scenarios
       </button>
       {open && (
         <div
           ref={popRef}
           id={id}
           role="menu"
-          className="absolute z-[1200] mt-2 w-[min(92vw,360px)] rounded-2xl border bg-background shadow-xl p-2 right-0 origin-top-right"
-          style={{ right: 0, left: "auto", transformOrigin: "top right" }}
+          className="z-[1200] w-[min(92vw,360px)] rounded-2xl border bg-background shadow-xl p-2 origin-top-right"
+          style={{ position: "fixed", top: coords?.top, right: coords?.right, left: "auto", transformOrigin: "top right" }}
         >
           <ul className="max-h-[60vh] overflow-auto">
             {SCENARIOS.map(s => (
               <li key={s.key}>
                 <button
*** End Patch
```

---

### Why this works

* The wrapper is now `inline-block`/`shrink-0`, so it doesn’t stretch across the header.
* Menus are **fixed-positioned** and computed from the trigger’s screen rect; their **right edge lines up with the trigger’s right edge**, regardless of container width or transforms.
* They re-position on **scroll/resize**, so they remain anchored correctly.

Apply this patch, refresh, and both **Role** and **Scenarios** menus should consistently drop **right-aligned** without going off-screen.
