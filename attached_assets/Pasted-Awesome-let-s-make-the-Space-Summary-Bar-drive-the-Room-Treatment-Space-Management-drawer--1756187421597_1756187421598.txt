Awesome — let’s make the **Space Summary Bar** drive the **Room (Treatment Space) Management drawer** filters with one tap. This adds a shared “preset filter” in the store, applies it automatically when the drawer opens, and also **updates the drawer live** if it’s already open.

Below is a clean, copy-pasteable patch.

---

# 1) Store: add a shared preset for space filters

**`client/src/store.js`**

```diff
 export const useED = create((set, get) => ({
   // …existing state & actions

+  // ---- Shared preset for RoomManagementDrawer filters
+  spaceFilterPreset: null, // e.g. { status:'available' } or { zone:'A' }
+  setSpaceFilterPreset(preset) { set({ spaceFilterPreset: preset }); },
+  clearSpaceFilterPreset() { set({ spaceFilterPreset: null }); },
 }));
```

---

# 2) Room Management Drawer: support status filter, apply preset on open & live

**`client/src/components/RoomManagementDrawer.jsx`**

```diff
-import { useEffect, useMemo, useState } from "react";
+import { useEffect, useMemo, useState } from "react";
 import { useED } from "../store";
 import TButton from "./ui/TButton";
@@
-export default function RoomManagementDrawer(){
-  const { roomOpen, roomEncounter: enc, spaces, loadSpaces, closeRoom, assignSpace, reassignSpace, markSpaceClean } = useED();
-  const [filters, setFilters] = useState({ zone:null, type:null, attrMon:null, attrIso:null });
+export default function RoomManagementDrawer(){
+  const {
+    roomOpen, roomEncounter: enc, spaces, loadSpaces, closeRoom,
+    assignSpace, reassignSpace, markSpaceClean,
+    spaceFilterPreset, clearSpaceFilterPreset
+  } = useED();
+  // Add `status` to filters so summary bar can target "Available", etc.
+  const [filters, setFilters] = useState({ zone:null, type:null, attrMon:null, attrIso:null, status:null });
   const [selected, setSelected] = useState(null);
   const [reason, setReason] = useState("");
   const [pending, setPending] = useState(false);
 
-  useEffect(()=>{ if(roomOpen){ setSelected(null); setReason(""); loadSpaces(); }}, [roomOpen]);
+  // On open: reset local UI, load spaces, and apply any preset once.
+  useEffect(()=>{
+    if (roomOpen) {
+      setSelected(null);
+      setReason("");
+      loadSpaces();
+      if (spaceFilterPreset) {
+        setFilters(f => ({ ...f, ...spaceFilterPreset }));
+        // keep preset so taps from bar can continue to update live; don't clear yet
+      }
+    }
+  }, [roomOpen]);
+
+  // If drawer is already open and preset changes (user taps the bar), apply it live.
+  useEffect(()=>{
+    if (roomOpen && spaceFilterPreset) {
+      setFilters(f => ({ ...f, ...spaceFilterPreset }));
+    }
+  }, [spaceFilterPreset, roomOpen]);
@@
-  const filtered = useMemo(()=>{
-    return spaces.filter(s=>{
+  const filtered = useMemo(()=>{
+    return spaces.filter(s=>{
+      if (filters.status && s.status !== filters.status) return false;
       if (filters.zone && s.zone !== filters.zone) return false;
       if (filters.type && s.type !== filters.type) return false;
       if (filters.attrMon === true && !s.monitored) return false;
       if (filters.attrIso === true && !(s.negativePressure || s.type==="isolation")) return false;
       return true;
     });
   }, [spaces, filters]);
@@
-        {/* Filters */}
-        <div className="px-4 pt-3">
+        {/* Filters */}
+        <div className="px-4 pt-3">
           <div className="text-sm mb-1">Filter</div>
           <div className="flex flex-wrap gap-2">
+            {/* Status chips (tap from Summary Bar sets this too) */}
+            {["available","cleaning","occupied","blocked"].map(st=>(
+              <Chip key={st}
+                    on={filters.status===st}
+                    label={cap(st)}
+                    onClick={()=>setFilters(f=>({ ...f, status: f.status===st ? null : st }))}/>
+            ))}
+            <div className="w-px h-6 bg-gray-200 mx-1" />
             {["A","B","C","FT","Paeds"].map(z=>(
               <Chip key={z} on={filters.zone===z} label={`Zone ${z}`} onClick={()=>setFilters(f=>({...f, zone:f.zone===z?null:z}))}/>
             ))}
             <div className="w-px h-6 bg-gray-200 mx-1" />
             {["resus","cubicle","chair","corridor","isolation","peds","procedure"].map(t=>(
               <Chip key={t} on={filters.type===t} label={cap(t)} onClick={()=>setFilters(f=>({...f, type:f.type===t?null:t}))}/>
             ))}
             <div className="w-px h-6 bg-gray-200 mx-1" />
             <Chip on={filters.attrMon===true} label="Monitored" onClick={()=>setFilters(f=>({...f, attrMon:f.attrMon===true?null:true}))}/>
             <Chip on={filters.attrIso===true} label="Isolation" onClick={()=>setFilters(f=>({...f, attrIso:f.attrIso===true?null:true}))}/>
+            <button
+              type="button"
+              className="ml-auto px-3 py-2 rounded-full border text-sm"
+              onClick={()=>{
+                setFilters({ zone:null, type:null, attrMon:null, attrIso:null, status:null });
+                clearSpaceFilterPreset();
+              }}
+            >
+              Clear filters
+            </button>
           </div>
         </div>
```

*No other logic changes required.*

---

# 3) Space Summary Bar: make counts tappable → set preset filters

**`client/src/components/SpaceSummaryBar.jsx`**

```diff
-import { useEffect, useMemo } from "react";
-import { useED } from "../store";
+import { useEffect, useMemo } from "react";
+import { useED } from "../store";
@@
 export default function SpaceSummaryBar() {
-  const { spaces, loadSpaces } = useED();
+  const { spaces, loadSpaces, setSpaceFilterPreset } = useED();
@@
   return (
     <div className="sticky top-0 z-20 bg-white border-b p-3">
       <div className="flex flex-wrap items-center gap-3 mb-2">
         <h3 className="font-semibold text-sm sm:text-base">Treatment Spaces</h3>
-        {Object.entries(counts.byStatus).map(([k,v])=>(
-          <span key={k} className={`px-2 py-0.5 rounded-full text-xs ${STATUS[k].cls}`}>
-            {STATUS[k].txt}: {v}
-          </span>
-        ))}
+        {Object.entries(counts.byStatus).map(([k,v])=>(
+          <button
+            key={k}
+            className={`px-2 py-0.5 rounded-full text-xs ${STATUS[k].cls}`}
+            onClick={()=> setSpaceFilterPreset({ status: k })}
+            title={`Show ${STATUS[k].txt}`}
+          >
+            {STATUS[k].txt}: {v}
+          </button>
+        ))}
       </div>
       <div className="flex flex-wrap gap-3 text-xs">
-        {Object.entries(counts.byZone).map(([zone,vals])=>(
-          <div key={zone} className="flex items-center gap-1">
+        {Object.entries(counts.byZone).map(([zone,vals])=>(
+          <div key={zone} className="flex items-center gap-1">
             <span className="font-medium">Zone {zone}:</span>
-            {Object.entries(vals).map(([k,v])=> v>0 && (
-              <span key={k} className={`px-1.5 py-0.5 rounded-full ${STATUS[k].cls}`}>
-                {v}
-              </span>
-            ))}
+            {Object.entries(vals).map(([k,v])=> v>0 && (
+              <button
+                key={k}
+                className={`px-1.5 py-0.5 rounded-full ${STATUS[k].cls}`}
+                onClick={()=> setSpaceFilterPreset({ zone, status: k })}
+                title={`Zone ${zone} • ${STATUS[k].txt}`}
+              >
+                {v}
+              </button>
+            ))}
           </div>
         ))}
       </div>
     </div>
   );
}
```

**Behavior**

* Tapping a **status badge** (e.g., *Available*) sets preset `{ status: 'available' }`.
* Tapping a **zone badge** (e.g., *Zone A • Cleaning*) sets `{ zone: 'A', status: 'cleaning' }`.
* If the **RoomManagementDrawer is already open**, it **updates instantly**.
* If it’s **not open**, the preset is **applied next time** you open the drawer (e.g., via *Assign/Reassign Space* on any card).

---

## ✅ What to test

1. Open Charge view → tap **Available** ⇒ open any **Assign/Reassign Space** drawer → it’s filtered to Available.
2. With drawer **already open**, tap **Zone B • Cleaning** ⇒ list updates live to Zone B + Cleaning.
3. Tap **Clear filters** inside drawer ⇒ all filters reset and preset is cleared.
4. Normal operations (assign, reassign, queue clean) still work.

---

If you want, we can add **one more nicety**: a small text chip above the grid in the drawer showing “Active filters: …” with quick “x” to remove each — say the word and I’ll patch it in.
